entrypoints Module;

comment "--";
comment "{-" "-}";

-- These are tokens, not terminals, so we can recover source positions
position token LamKeyword   {"λ"};
position token PiKeyword    {"Π"};
position token SigmaKeyword {"Σ"};
position token HoleKeyword  {"_"};
position token TypeKeyword  {"Type"};
position token LParen       {"("};
position token RParen       {")"};

-- TODO: exclude \v (vertical tab)
position token Name (char - [" \t\r\n\f(),."])+;

layout toplevel;

Module. Module ::= [Decl];

Define. Decl ::= "define" Param "≡" Expr;
Assume. Decl ::= "assume" Name ":" Expr;
Prove.  Decl ::= "prove"  Name ":" Expr;

separator Decl ";";

Arrow.  Expr  ::= Expr1 "→" Expr;
_.      Expr  ::= Expr1;
Times.  Expr1 ::= Expr2 "×" Expr1;
_.      Expr1 ::= Expr2;
Equals. Expr2 ::= Expr3 "=" Expr3;
_.      Expr2 ::= Expr3;
App.    Expr3 ::= Expr3 Expr4;
_.      Expr3 ::= Expr4;

-- Binders are ambiguous and cause shift/reduce conflicts (which should be
-- resolved by shifting).
Lam.    Expr4 ::= LamKeyword   Param "." Expr;
Pi.     Expr4 ::= PiKeyword    Param "." Expr;
Sigma.  Expr4 ::= SigmaKeyword Param "." Expr;
_.      Expr4 ::= Expr5;

-- Includes both parethensized expressions, and tuples
Parens. Expr5 ::= LParen [Expr] RParen;

Id.     Expr5 ::= Name;
Hole.   Expr5 ::= HoleKeyword;
Type.   Expr5 ::= TypeKeyword;

separator nonempty Expr ",";

UntypedParam. Param ::= Name;
TypedParam.   Param ::= Name ":" Expr;
