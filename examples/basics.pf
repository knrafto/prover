:assume Id : Π (A : Type). A → A → Type
:assume refl : Π (A : Type). Π (a : A). a = a
# Based path induction.
:assume ind-Id : Π (A : Type). Π (a : A).
    Π (C : Π (b : A). a = b → Type).
    C(a, refl(A, a)) →
    Π (b : A). Π (p : a = b). C(b, p)

IsContr := λ (A : Type). Σ (a : A). Π (b : A). a = b

IsProp := λ (A : Type). Π (a : A). Π (b : A). a = b

IsSet := λ (A : Type). Π (a : A). Π (b : A).
    Π (p : a = b). Π (q : a = b). p = q

Fiber := λ (A : Type). λ (B : Type). λ (f : A → B). λ (b : B).
    Σ (a : A). f(a) = b

IsEquiv := λ (A : Type). λ (B : Type). λ (f : A → B).
    Π (b : B). IsContr(Fiber(_, _, f, b))

IsEmbedding := λ (A : Type). λ (B : Type). λ (f : A → B).
    Π (b : B). IsProp(Fiber(_, _, f, b))

:assume 0 : Type
:assume ind0 : Π (C : 0 → Type). Π (a : 0). C(a)

:assume 1 : Type
:assume tt : 1
:assume ind-1 : Π (C : 1 → Type). C(tt) → Π (a : 1). C(a)

:prove 0-IsProp : IsProp(0)

:prove 1-IsContr : IsContr(1)
:prove 1-IsProp : IsProp(1)

# sym : Π (A : Type). Π (a : A). Π (b : A). a = b → b = a
#     := λ (A : Type). λ (a : A). ind-Id(A, a, λ (b : A). λ (p : a = b). b = a, refl(A, a))

# :prove p4 : Π (A : Type). Π (a : A). IsContr(Σ (b : A). a = b)
