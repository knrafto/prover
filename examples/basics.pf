-- Cartesian product.
infixr 5 ×
define × A B ≡ Σ (a : A). B

-- Martin-Löf identity type.
axiom Id A : A → A → Type

infix 4 =
define = {A} (a b : A) ≡ Id A a b

axiom refl {A} {a : A} : a = a
axiom Id-ind {A} (C : Π (a b : A). a = b → Type) (c : Π a. C a a refl) : Π a b p. C a b p
rewrite Id-ind-refl A (C : Π (a b : A). a = b → Type) c a
    where Id-ind C c _ _ refl ≡ c a

axiom Sigma (A : Type) (B : A → Type) : Type
axiom pair {A} {B} (a : A) (b : B a) : Sigma A B
axiom Sigma-ind A B (C : Sigma A B → Type) : (Π a b. C (pair a b)) → Π x. C x
rewrite Sigma-ind-pair (A : Type) (B : A → Type) (C : Sigma A B → Type) (f : Π a b. C (pair a b)) (a : A) (b : B a)
    where Sigma-ind A B C f (pair a b) ≡ f a b

define fst {A} {B} : Sigma A B → A
    ≡ Sigma-ind A B _ (λ a b. a)
define snd {A} {B} : Π (p : Sigma A B). B (fst p)
    ≡ Sigma-ind A B (λ p. B (fst p)) (λ a b. b)

-- Empty type.
axiom 0 : Type
axiom 0-ind : Π (C : 0 → Type). Π a. C a

-- Unit type.
axiom 1 : Type
axiom tt : 1
axiom 1-ind : Π (C : 1 → Type). C tt → Π a. C a
rewrite 1-ind-tt C c where 1-ind C c tt ≡ c

-- Boolean type.
axiom 2 : Type
axiom 0₂ : 2
axiom 1₂ : 2
axiom 2-ind : Π (C : 2 → Type). C 0₂ → C 1₂ → Π a. C a
rewrite 2-ind-0₂ C c₀ c₁ where 2-ind C c₀ c₁ 0₂ ≡ c₀
rewrite 2-ind-1₂ C c₀ c₁ where 2-ind C c₀ c₁ 1₂ ≡ c₁

-- Coproduct type.
-- TODO: use +?
infixr 1 ⊎
axiom ⊎ : Type → Type → Type
axiom inl {A} {B} : A → A ⊎ B
axiom inr {A} {B} : B → A ⊎ B
axiom ⊎-ind A B : Π (C : A ⊎ B → Type). (Π a. C (inl a)) → (Π b. C (inr b)) → Π x. C x
rewrite ⊎-ind-inl A B C l r a
    where ⊎-ind A B C l r (inl a) ≡ l a
rewrite ⊎-ind-inr A B C l r b
    where ⊎-ind A B C l r (inr b) ≡ r b

-- Natural numbers.
axiom ℕ : Type
axiom zero : ℕ
axiom suc : ℕ → ℕ
axiom ℕ-ind : Π (C : ℕ → Type). C zero → (Π n. C n → C (suc n)) → Π n. C n
rewrite ℕ-ind-zero C base step
    where ℕ-ind C base step zero ≡ base
rewrite ℕ-ind-suc C base step n
    where ℕ-ind C base step (suc n) ≡ step n (ℕ-ind C base step n)

-- Structure of identity types.
-- TODO: infer C of Id-ind in all cases?
define ap (A B : Type) (x y : A) (f : A → B) : x = y → f x = f y
    ≡ Id-ind (λ x y p. f x = f y) (λ x. refl) x y
define subst (A : Type) (x y : A) (B : A → Type) : x = y → B x → B y
    ≡ Id-ind (λ x y p. B x → B y) (λ x b. b) x y
define sym (A : Type) (x y : A) : x = y → y = x
    ≡ Id-ind (λ x y p. y = x) (λ x. refl) x y
define trans (A : Type) (x y z : A) : x = y → y = z → x = z
    ≡ λ (p : x = y). λ (q : y = z).
        Id-ind (λ x y p. Π z. y = z → x = z) (λ x z p. p) x y p z q

-- Functions.
define id {A} : A → A
    ≡ λ x. x

infixr 9 ∘
define ∘ {A} {B} {C} : (B → C) → (A → B) → (A → C)
    ≡ λ g f. λ x. g (f x)

define happly (A B : Type) (f g : A → B) : f = g → Π x. f x = g x
    ≡ Id-ind (λ f g p. Π x. f x = g x) (λ f x. refl) f g

-- Sets and logic.
define IsContr (A : Type) ≡ Σ (a : A). Π (x : A). a = x
define IsProp  (A : Type) ≡ Π (x y : A). x = y
define IsSet   (A : Type) ≡ Π (x y : A). IsProp (x = y)

define Fib (A B : Type) (f : A → B) (b : B) : Type
    ≡ Σ (a : A). f a = b
define IsEquiv (A B : Type) (f : A → B) : Type
    ≡ Π (b : B). IsContr (Fib A B f b)

-- TODO: define
axiom inv {A} {B} (f : A → B) (f-IsEquiv : IsEquiv A B f) : B → A
--    ≡ λ b. fst (fst (f-IsEquiv b))

-- Natural numbers.
define ℕ-rec {A} (z : A) (s : A → A) : ℕ → A
    ≡ ℕ-ind (λ n. A) z (λ n. s)

define one   ≡ suc zero
define two   ≡ suc one
define three ≡ suc two
define four  ≡ suc three
define five  ≡ suc four
define six   ≡ suc five
define seven ≡ suc six
define eight ≡ suc seven
define nine  ≡ suc eight
define ten   ≡ suc nine

-- Addition. Flipped from Agda's version.
-- TODO: is this a good idea?

define add : ℕ → ℕ → ℕ
    ≡ λ m. ℕ-rec m suc
infixl 6 +
define + ≡ add

define +-zero : Π n. n + zero = n
    ≡ λ n. refl

define +-suc : Π m n. m + suc n = suc (m + n)
    ≡ λ n m. refl

define zero-+ : Π n. zero + n = n
    ≡ ℕ-ind _ refl (λ n p. ap _ _ _ _ suc p)

define suc-+ : Π m n. suc m + n = suc (m + n)
    ≡ λ m. ℕ-ind _ refl (λ n p. ap _ _ _ _ suc p)

define +-comm : Π m n. n + m = m + n
    ≡ λ m. ℕ-ind _ (zero-+ m) (λ n p. trans _ _ _ _ (suc-+ n m) (ap _ _ _ _ suc p))

-- TODO: which way should this go?
define +-assoc : Π a b c. (a + b) + c = a + (b + c)
   ≡ λ a b. ℕ-ind _ refl (λ c p. ap _ _ _ _ suc p)

-- Multiplication. Also different from Agda's version.

define mul : ℕ → ℕ → ℕ
    ≡ λ m. ℕ-rec zero (add m)

infixl 7 *
define * ≡ mul

define *-zero : Π n. n * zero = zero
    ≡ λ n. refl

define *-suc : Π m n. m * suc n = m + m * n
    ≡ λ m n. refl

define zero-* : Π n. zero * n = zero
    ≡ ℕ-ind _ refl (λ n p. ap _ _ _ _ (add zero) p)

-- Propositional truncation.
axiom Trunc : Type → Type
axiom trunc : Π A. A → Trunc A
axiom Trunc-IsProp : Π A. IsProp (Trunc A)
axiom Trunc-rec : Π A B. IsProp B → (A → B) → Trunc A → B
rewrite Trunc-rec-trunc A B B-IsProp f a
    where Trunc-rec A B B-IsProp f (trunc _ a) ≡ f a

-- Set-quotients.
axiom Quot : Π (A : Type). (A → A → Type) → Type
axiom quot : Π (A : Type) (R : A → A → Type). A → Quot A R
axiom Quot-= : Π (A : Type) (R : A → A → Type) (x y : A). R x y → quot A R x = quot A R y
axiom Quot-IsSet : Π (A : Type) (R : A → A → Type). IsSet (Quot A R)
axiom Quot-ind : Π A R (P : Quot A R → Type). (Π (q : Quot A R). IsProp (P q)) → (Π a. P (quot A R a)) → Π q. P q
rewrite Quot-ind-quot A R P P-IsProp f a
    where Quot-ind A R P P-IsProp f (quot _ _ a) ≡ f a
axiom Quot-rec : Π A R B. IsSet B → Π (f : A → B). (Π x. Π y. R x y → f x = f y) → Quot A R → B
rewrite Quot-rec-quote A R B B-IsSet f f-= a
    where Quot-rec A R B B-IsSet f f-= (quot _ _ a) ≡ f a

-- The integers.
axiom ℤ : Type
axiom zero : ℤ
axiom suc  : ℤ → ℤ
axiom pred : ℤ → ℤ
axiom ℤ-ind : Π (P : ℤ → Type). (Π n. IsProp (P n)) → P zero → (Π n. P n → P (suc n)) → (Π n. P n → P (pred n)) → Π n. P n
rewrite ℤ-ind-zero P P-IsProp z s p
    where ℤ-ind P P-IsProp z s p zero ≡ z
rewrite ℤ-ind-suc P P-IsProp z s p n
    where ℤ-ind P P-IsProp z s p (suc n) ≡ s n (ℤ-ind P P-IsProp z s p n)
rewrite ℤ-ind-pred P P-IsProp z s p n
    where ℤ-ind P P-IsProp z s p (pred n) ≡ p n (ℤ-ind P P-IsProp z s p n)
axiom ℤ-rec : Π (A : Type). A → Π (f : A → A). IsEquiv A A f → ℤ → A
rewrite ℤ-rec-zero A z f f-IsEquiv
    where ℤ-rec A z f f-IsEquiv zero ≡ z
rewrite ℤ-rec-suc A z f f-IsEquiv n
    where ℤ-rec A z f f-IsEquiv (suc n) ≡ f (ℤ-rec A z f f-IsEquiv n)
rewrite ℤ-rec-pred A z f f-IsEquiv n
    where ℤ-rec A z f f-IsEquiv (pred n) ≡ inv f f-IsEquiv (ℤ-rec A z f f-IsEquiv n)
