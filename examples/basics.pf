-- Identity types, with based path induction.
assume Id : Π A. A → A → Type
assume refl : Π A. Π a : A. a = a
assume Id-ind : Π A.
    Π C : (Π a : A. Π b : A. a = b → Type).
    (Π a. C a a (refl A a)) →
    Π a. Π b. Π p. C a b p
assume Id-ind-refl : Π A.
    Π C : (Π a : A. Π b : A. a = b → Type).
    Π c : Π a. C a a (refl A a).
    Π a.
    Id-ind A C c a a (refl A a) = c a

-- Empty type.
assume 0 : Type
assume 0-ind : Π C : 0 → Type. Π a. C a

-- Unit type.
assume 1 : Type
assume tt : 1
assume 1-ind : Π C : 1 → Type. C tt → Π a. C a
assume 1-ind-tt : Π C : 1 → Type. Π c : C tt. 1-ind C c tt = c

-- Boolean type.
assume 2 : Type
assume 0₂ : 2
assume 1₂ : 2
assume 2-ind : Π C : 2 → Type. C 0₂ → C 1₂ → Π a. C a
assume 2-ind-0₂ : Π C : 2 → Type. Π c₀ : C 0₂. Π c₁ : C 1₂. 2-ind C c₀ c₁ 0₂ = c₀
assume 2-ind-1₂ : Π C : 2 → Type. Π c₀ : C 0₂. Π c₁ : C 1₂. 2-ind C c₀ c₁ 1₂ = c₁

-- Natural numbers.
assume ℕ : Type
assume zero : ℕ
assume suc : ℕ → ℕ
assume ℕ-ind : Π C : ℕ → Type. C zero → (Π n. C n → C (suc n)) → Π n. C n
assume ℕ-ind-zero : Π C : ℕ → Type. Π base : C zero. Π step : (Π n. C n → C (suc n)). ℕ-ind C base step zero = base
assume ℕ-ind-suc : Π C : ℕ → Type. Π base : C zero. Π step : (Π n. C n → C (suc n)). Π n. ℕ-ind C base step (suc n) = step n (ℕ-ind C base step n)

-- Structure of identity types.
define ap
    : Π A : Type. Π B : Type. Π f : A → B. Π x : A. Π y : A. x = y → f x = f y
    ≡ λ A : Type. λ B : Type. λ f : A → B. Id-ind A _ (λ x. refl B (f x))
define subst
    : Π A : Type. Π B : A → Type. Π x : A. Π y : A. x = y → B x → B y
    ≡ λ A : Type. λ B : A → Type. Id-ind A _ (λ x. λ b. b)
define sym
    : Π A : Type. Π x : A. Π y : A. x = y → y = x
    ≡ λ A : Type. Id-ind A _ (λ x. refl A x)
define trans
    : Π A : Type. Π x : A. Π y : A. Π z : A. x = y → y = z → x = z
    ≡ λ A : Type. λ x : A. λ y : A. λ z : A. λ p : x = y. λ q : y = z.
        Id-ind A (λ x. λ y : A. λ p : x = y. Π z : A. y = z → x = z) (λ x. λ z. λ p. p) x y p z q

-- Function types.
define happly
    : Π A : Type. Π B : Type. Π f : A → B. Π g : A → B. f = g → Π x : A. f x = g x
    ≡ λ A : Type. λ B : Type. Id-ind (A → B) _ (λ f. λ x. refl B (f x))

-- Sets and logic.
-- define IsContr ≡ λ A : Type. Σ a : A. Π x : A. a = x
define IsProp ≡ λ A : Type. Π x : A. Π y : A. x = y

-- Natural numbers.
define add
    : ℕ → ℕ → ℕ
    ≡ ℕ-ind _ (λ m. m) (λ n. λ n+. λ m. suc (n+ m))

define zero-+
    : Π n. add zero n = n
    ≡ happly _ _ _ _ (ℕ-ind-zero _ _ _)

define suc-+
    : Π n. Π m. add (suc n) m = suc (add n m)
    ≡ λ n. happly _ _ _ _ (ℕ-ind-suc _ _ _ _)

define +-zero
    : Π n. add n zero = n
    ≡ ℕ-ind _ (zero-+ _) (λ n. λ add-n-zero=n. trans _ _ _ _ (suc-+ _ _) (ap _ _ suc _ _ add-n-zero=n))

-- TODO: finish
define +-suc
    : Π n. Π m. add n (suc m) = suc (add n m)
    ≡ ℕ-ind _
        (λ m. trans _ _ _ _ (zero-+ _) (ap _ _ suc _ _ (sym _ _ _ (zero-+ _))))
        (λ n. λ rec. λ m. _)
