# Identity types, with based path induction.
:assume Id : Π (A : Type). A → A → Type
:assume refl : Π (A : Type). Π (a : A). a = a
:assume ind-Id : Π (A : Type). Π (a : A).
    Π (C : Π (b : A). a = b → Type).
    C(a, refl(A, a)) →
    Π (b : A). Π (p : a = b). C(b, p)
:assume ind-Id-refl : Π (A : Type). Π (a : A).
    Π (C : Π (b : A). a = b → Type).
    Π (c : C(a, refl(A, a))).
    ind-Id(A, a, C, c, a, refl(A, a)) = c

# Empty type.
:assume 0 : Type
:assume ind0 : Π (C : 0 → Type). Π (a : 0). C(a)

# Unit type.
:assume 1 : Type
:assume tt : 1
:assume ind-1 : Π (C : 1 → Type). C(tt) → Π (a : 1). C(a)
:assume ind-1-tt : Π (C : 1 → Type). Π (c : C(tt)). ind-1(C, c, tt) = c

# Groupoid structure of identity types.
sym : Π (A : Type). Π (a : A). Π (b : A). a = b → b = a
    := λ (A : Type). λ (a : A). ind-Id(A, a, _, refl(A, a))

trans : Π (A : Type). Π (a : A). Π (b : A). Π (c : A). a = b → b = c → a = c
    := λ (A : Type). λ (a : A). λ (b : A). λ (c : A). λ (p : a = b). λ (q : b = c).
        ind-Id(A, a, λ (b : A). λ (p : a = b). Π (c : A). b = c → a = c, ind-Id(A, a, _, refl(A, a)), b, p)(c, q)
