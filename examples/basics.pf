:assume Id : Π (A : Type). A → A → Type
:assume refl : Π (A : Type). Π (a : A). Id(A, a, a)

IsContr := λ (A : Type). Σ (a : A). Π (b : A). Id(_, a, b)

IsProp := λ (A : Type). Π (a : A). Π (b : A). Id(_, a, b)

IsSet := λ (A : Type). Π (a : A). Π (b : A).
    Π (p : Id(_, a, b)). Π (q : Id(_, a, b)). Id(_, p, q)

Fiber := λ (A : Type). λ (B : Type). λ (f : A → B). λ (b : B).
    Σ (a : A). Id(_, f(a), b)

IsEquiv := λ (A : Type). λ (B : Type). λ (f : A → B).
    Π (b : B). IsContr(Fiber(_, _, f, b))

IsEmbedding := λ (A : Type). λ (B : Type). λ (f : A → B).
    Π (b : B). IsProp(Fiber(_, _, f, b))

:assume 1 : Type
:assume ⋆ : 1
:assume ind1 : Π (C : 1 → Type). C(⋆) → Π (a : 1). C(a)

p1 : IsProp(1) := ind1(_, ind1(_, refl(_, _)))
:prove p2 : 1
# :prove p3 : Id(1, ⋆, ⋆)
